
Administrator@0257530497995b1 MINGW64 ~/NewRebase (master)
$ ls

Administrator@0257530497995b1 MINGW64 ~/NewRebase (master)
$ echo "M1" >> file.txt

Administrator@0257530497995b1 MINGW64 ~/NewRebase (master)
$ git add .
warning: in the working copy of 'file.txt', LF will be replaced by CRLF the next time Git touches it

Administrator@0257530497995b1 MINGW64 ~/NewRebase (master)
$ git commit -m "m1"
[master (root-commit) 670b763] m1
 1 file changed, 1 insertion(+)
 create mode 100644 file.txt

Administrator@0257530497995b1 MINGW64 ~/NewRebase (master)
$ echo "M2" >> file.txt

Administrator@0257530497995b1 MINGW64 ~/NewRebase (master)
$ git add .
warning: in the working copy of 'file.txt', LF will be replaced by CRLF the next time Git touches it

Administrator@0257530497995b1 MINGW64 ~/NewRebase (master)
$ git commit -m "m2"
[master f1215e1] m2
 1 file changed, 1 insertion(+)

Administrator@0257530497995b1 MINGW64 ~/NewRebase (master)
$ echo "M3" >> file.txt

Administrator@0257530497995b1 MINGW64 ~/NewRebase (master)
$ git add .
warning: in the working copy of 'file.txt', LF will be replaced by CRLF the next time Git touches it

Administrator@0257530497995b1 MINGW64 ~/NewRebase (master)
$ git commit -m "m3"
[master 954529d] m3
 1 file changed, 1 insertion(+)

Administrator@0257530497995b1 MINGW64 ~/NewRebase (master)
$ git log
commit 954529db6ccd5b20718827dced9fa5f5f35c60d3 (HEAD -> master)
Author: RASHANTH793 <jprashanth429@gmail.com>
Date:   Thu Jan 16 17:47:26 2025 +0530

    m3

commit f1215e157156032d42f51c087bd1851f9377b2e1
Author: RASHANTH793 <jprashanth429@gmail.com>
Date:   Thu Jan 16 17:47:04 2025 +0530

    m2

commit 670b763f756cbaddfeb0652f25ecb744e15dc4ca
Author: RASHANTH793 <jprashanth429@gmail.com>
Date:   Thu Jan 16 17:46:32 2025 +0530

    m1

Administrator@0257530497995b1 MINGW64 ~/NewRebase (master)
$ git checkout -b feature
Switched to a new branch 'feature'

Administrator@0257530497995b1 MINGW64 ~/NewRebase (feature)
$ echo "F1 " >> Feature.txt

Administrator@0257530497995b1 MINGW64 ~/NewRebase (feature)
$ git add .
warning: in the working copy of 'Feature.txt', LF will be replaced by CRLF the next time Git touches it
g
Administrator@0257530497995b1 MINGW64 ~/NewRebase (feature)
$ git commit -m "f1"
[feature cff85af] f1
 1 file changed, 1 insertion(+)
 create mode 100644 Feature.txt

Administrator@0257530497995b1 MINGW64 ~/NewRebase (feature)
$ echo "F2 " >> Feature.txt

Administrator@0257530497995b1 MINGW64 ~/NewRebase (feature)
$ git add .
warning: in the working copy of 'Feature.txt', LF will be replaced by CRLF the next time Git touches it

Administrator@0257530497995b1 MINGW64 ~/NewRebase (feature)
$ git commit -m "f2"
[feature 82b40fc] f2
 1 file changed, 1 insertion(+)

Administrator@0257530497995b1 MINGW64 ~/NewRebase (feature)
$ git checkout -b NewFeature
Switched to a new branch 'NewFeature'

Administrator@0257530497995b1 MINGW64 ~/NewRebase (NewFeature)
$ git branch
* NewFeature
  feature
  master

Administrator@0257530497995b1 MINGW64 ~/NewRebase (NewFeature)
$ git checkout master
Switched to branch 'master'

Administrator@0257530497995b1 MINGW64 ~/NewRebase (master)
$ echo  "M4" >> file.txt

Administrator@0257530497995b1 MINGW64 ~/NewRebase (master)
$ git add .
warning: in the working copy of 'file.txt', LF will be replaced by CRLF the next time Git touches it

Merge branch 'master' into NewFeature




















Merge made by the 'ort' strategy.
 file.txt | 1 +
 1 file changed, 1 insertion(+)

Administrator@0257530497995b1 MINGW64 ~/NewRebase (NewFeature)
$ git log --oneline
f780dea (HEAD -> NewFeature) Merge branch 'master' into NewFeature
1a73806 (master, featire) M4
82b40fc f2
cff85af f1
954529d m3
f1215e1 m2
670b763 m1
----------------------------------x--------------------------------
Administrator@0257530497995b1 MINGW64 ~
$ mkdir NewStash

Administrator@0257530497995b1 MINGW64 ~
$ cd New
NewIgnore/     NewRebase/     NewRepoRebase/ NewStash/

Administrator@0257530497995b1 MINGW64 ~
$ cd NewStash

Administrator@0257530497995b1 MINGW64 ~/NewStash
$ git init
Initialized empty Git repository in C:/Users/Administrator/NewStash/.git/

Administrator@0257530497995b1 MINGW64 ~/NewStash (master)
$ echo "m1" >> File.txt

Administrator@0257530497995b1 MINGW64 ~/NewStash (master)
$ git add .
warning: in the working copy of 'File.txt', LF will be replaced by CRLF the next time Git touches it

Administrator@0257530497995b1 MINGW64 ~/NewStash (master)
$ git commit -m "m1"
[master (root-commit) 8ab7e89] m1
 1 file changed, 1 insertion(+)
 create mode 100644 File.txt

Administrator@0257530497995b1 MINGW64 ~/NewStash (master)
$ echo "m2" >> File.txt

Administrator@0257530497995b1 MINGW64 ~/NewStash (master)
$ git commit -m "m2"
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   File.txt

no changes added to commit (use "git add" and/or "git commit -a")

Administrator@0257530497995b1 MINGW64 ~/NewStash (master)
$ git add .
warning: in the working copy of 'File.txt', LF will be replaced by CRLF the next time Git touches it

Administrator@0257530497995b1 MINGW64 ~/NewStash (master)
$ git commit -m "m2"
[master 24ab57c] m2
 1 file changed, 1 insertion(+)

Administrator@0257530497995b1 MINGW64 ~/NewStash (master)
$ git remote add origin git@github.com:RASHANTH793/StashRepo.git

Administrator@0257530497995b1 MINGW64 ~/NewStash (master)
$ git push -u origin master
Enumerating objects: 6, done.
Counting objects: 100% (6/6), done.
Delta compression using up to 4 threads
Compressing objects: 100% (2/2), done.
Writing objects: 100% (6/6), 433 bytes | 216.00 KiB/s, done.
Total 6 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0)
To github.com:RASHANTH793/StashRepo.git
 * [new branch]      master -> master
branch 'master' set up to track 'origin/master'.

Administrator@0257530497995b1 MINGW64 ~/NewStash (master)
$ echo "Welcome" > File.txt

Administrator@0257530497995b1 MINGW64 ~/NewStash (master)
$ git pull
remote: Enumerating objects: 5, done.
remote: Counting objects: 100% (5/5), done.
remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0)
Unpacking objects: 100% (3/3), 912 bytes | 76.00 KiB/s, done.
From github.com:RASHANTH793/StashRepo
   24ab57c..6edfc6d  master     -> origin/master
Updating 24ab57c..6edfc6d
error: Your local changes to the following files would be overwritten by merge:
        File.txt
Please commit your changes or stash them before you merge.
Aborting

Administrator@0257530497995b1 MINGW64 ~/NewStash (master)
$ git stash save "first stash"
warning: in the working copy of 'File.txt', LF will be replaced by CRLF the next time Git touches it
Saved working directory and index state On master: first stash

Administrator@0257530497995b1 MINGW64 ~/NewStash (master)
$ git status
On branch master
Your branch is behind 'origin/master' by 1 commit, and can be fast-forwarded.
  (use "git pull" to update your local branch)

nothing to commit, working tree clean

Administrator@0257530497995b1 MINGW64 ~/NewStash (master)
$ cat File.txt
m1
m2

Administrator@0257530497995b1 MINGW64 ~/NewStash (master)
$ git pull
Updating 24ab57c..6edfc6d
Fast-forward
 File.txt | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

Administrator@0257530497995b1 MINGW64 ~/NewStash (master)
$ cat File.txt
m1 Hiii hello
m2

Administrator@0257530497995b1 MINGW64 ~/NewStash (master)
$ git stash list
stash@{0}: On master: first stash

Administrator@0257530497995b1 MINGW64 ~/NewStash (master)
$ git stash apply
Auto-merging File.txt
CONFLICT (content): Merge conflict in File.txt
On branch master
Your branch is up to date with 'origin/master'.

Unmerged paths:
  (use "git restore --staged <file>..." to unstage)
  (use "git add <file>..." to mark resolution)
        both modified:   File.txt

no changes added to commit (use "git add" and/or "git commit -a")

Administrator@0257530497995b1 MINGW64 ~/NewStash (master)
$ cat File.txt
<<<<<<< Updated upstream
m1 Hiii hello
m2
=======
Welcome
>>>>>>> Stashed changes

Administrator@0257530497995b1 MINGW64 ~/NewStash (master)
$ git add .

Administrator@0257530497995b1 MINGW64 ~/NewStash (master)
$ git commit -m "mv1"
[master 12a7eb0] mv1
 1 file changed, 1 insertion(+), 2 deletions(-)

Administrator@0257530497995b1 MINGW64 ~/NewStash (master)
$ git status
On branch master
Your branch is ahead of 'origin/master' by 1 commit.
  (use "git push" to publish your local commits)

nothing to commit, working tree clean

Administrator@0257530497995b1 MINGW64 ~/NewStash (master)
$ git push
Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Writing objects: 100% (3/3), 254 bytes | 127.00 KiB/s, done.
Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0)
To github.com:RASHANTH793/StashRepo.git
   6edfc6d..12a7eb0  master -> master

Administrator@0257530497995b1 MINGW64 ~/NewStash (master)
$ git stash list
stash@{0}: On master: first stash

Administrator@0257530497995b1 MINGW64 ~/NewStash (master)
$ git stash drop stash@{0}
Dropped stash@{0} (fba52a6d45c172bb6c2b1caa428fb0580bd14ae9)

Administrator@0257530497995b1 MINGW64 ~/NewStash (master)
$ cat File.txt
Hello Ust
Administrator@0257530497995b1 MINGW64 ~/NewStash (master)
$ git stash list
-----------------x----------------------------------
Administrator@0257530497995b1 MINGW64 ~
$ mkdir NewRevert

Administrator@0257530497995b1 MINGW64 ~
$ cd NewRevert/

Administrator@0257530497995b1 MINGW64 ~/NewRevert
$ git init
Initialized empty Git repository in C:/Users/Administrator/NewRevert/.git/

Administrator@0257530497995b1 MINGW64 ~/NewRevert (master)
$ echo "Af1" >> file.txt

Administrator@0257530497995b1 MINGW64 ~/NewRevert (master)
$ git add .
warning: in the working copy of 'file.txt', LF will be replaced by CRLF the next time Git touches it
g
Administrator@0257530497995b1 MINGW64 ~/NewRevert (master)
$ git commit -m "a1"
[master (root-commit) 231a07d] a1
 1 file changed, 1 insertion(+)
 create mode 100644 file.txt

Administrator@0257530497995b1 MINGW64 ~/NewRevert (master)
$ echo "Af2" >> file.txt

Administrator@0257530497995b1 MINGW64 ~/NewRevert (master)
$ git add
Nothing specified, nothing added.
hint: Maybe you wanted to say 'git add .'?
hint: Disable this message with "git config advice.addEmptyPathspec false"

Administrator@0257530497995b1 MINGW64 ~/NewRevert (master)
$ git add .
warning: in the working copy of 'file.txt', LF will be replaced by CRLF the next time Git touches it

Administrator@0257530497995b1 MINGW64 ~/NewRevert (master)
$ git commit -m "a2
> "
[master cf4e716] a2
 1 file changed, 1 insertion(+)

Administrator@0257530497995b1 MINGW64 ~/NewRevert (master)
$ echo "Af3" >> file.txt

Administrator@0257530497995b1 MINGW64 ~/NewRevert (master)
$ git add .
warning: in the working copy of 'file.txt', LF will be replaced by CRLF the next time Git touches it

Administrator@0257530497995b1 MINGW64 ~/NewRevert (master)
$ git commit -m "a3"
[master dbcc72f] a3
 1 file changed, 1 insertion(+)

Administrator@0257530497995b1 MINGW64 ~/NewRevert (master)
$ cat file.txt
Af1
Af2
Af3

Administrator@0257530497995b1 MINGW64 ~/NewRevert (master)
$ git log --oneline
dbcc72f (HEAD -> master) a3
cf4e716 a2
231a07d a1

Administrator@0257530497995b1 MINGW64 ~/NewRevert (master)
$ git revert HEAD ~2
fatal: bad revision '~2'

Administrator@0257530497995b1 MINGW64 ~/NewRevert (master)
$ git revert HEAD~2
CONFLICT (modify/delete): file.txt deleted in (empty tree) and modified in HEAD.  Version HEAD of file.txt left in tree.
error: could not revert 231a07d... a1
hint: After resolving the conflicts, mark them with
hint: "git add/rm <pathspec>", then run
hint: "git revert --continue".
hint: You can instead skip this commit with "git revert --skip".
hint: To abort and get back to the state before "git revert",
hint: run "git revert --abort".
hint: Disable this message with "git config advice.mergeConflict false"

Administrator@0257530497995b1 MINGW64 ~/NewRevert (master|REVERTING)
$ cat file.txt
Af1
Af2
Af3

Administrator@0257530497995b1 MINGW64 ~/NewRevert (master|REVERTING)
$ git log --oneline
dbcc72f (HEAD -> master) a3
cf4e716 a2
231a07d a1

Administrator@0257530497995b1 MINGW64 ~/NewRevert (master|REVERTING)
$ git revert HEAD~2..HEAD
error: Reverting is not possible because you have unmerged files.
hint: Fix them up in the work tree, and then use 'git add/rm <file>'
hint: as appropriate to mark resolution and make a commit.
fatal: revert failed

Administrator@0257530497995b1 MINGW64 ~/NewRevert (master|REVERTING)
$ git revert HEAD~2..
error: revert is already in progress
hint: try "git revert (--continue | --skip | --abort | --quit)"
fatal: revert failed

Administrator@0257530497995b1 MINGW64 ~/NewRevert (master|REVERTING)
$ git log --oneline
dbcc72f (HEAD -> master) a3
cf4e716 a2
231a07d a1

Administrator@0257530497995b1 MINGW64 ~/NewRevert (master|REVERTING)
$ git revert cf4e716
error: Reverting is not possible because you have unmerged files.
hint: Fix them up in the work tree, and then use 'git add/rm <file>'
hint: as appropriate to mark resolution and make a commit.
fatal: revert failed

Administrator@0257530497995b1 MINGW64 ~/NewRevert (master|REVERTING)
$ git revert cf4e716 HEAD
error: revert is already in progress
hint: try "git revert (--continue | --skip | --abort | --quit)"
fatal: revert failed

Administrator@0257530497995b1 MINGW64 ~/NewRevert (master|REVERTING)
$ git revert cf4e716 HEAD~2
error: revert is already in progress
hint: try "git revert (--continue | --skip | --abort | --quit)"
fatal: revert failed

Administrator@0257530497995b1 MINGW64 ~/NewRevert (master|REVERTING)
$ git revert dbcc72f..cf4e716
error: empty commit set passed
fatal: revert failed

Administrator@0257530497995b1 MINGW64 ~/NewRevert (master|REVERTING)
$ git log --oneline
dbcc72f (HEAD -> master) a3
cf4e716 a2
231a07d a1

Administrator@0257530497995b1 MINGW64 ~/NewRevert (master|REVERTING)
$ git status
On branch master
You are currently reverting commit 231a07d.
  (fix conflicts and run "git revert --continue")
  (use "git revert --skip" to skip this patch)
  (use "git revert --abort" to cancel the revert operation)

Unmerged paths:
  (use "git restore --staged <file>..." to unstage)
  (use "git add/rm <file>..." as appropriate to mark resolution)
        deleted by them: file.txt

no changes added to commit (use "git add" and/or "git commit -a")

Administrator@0257530497995b1 MINGW64 ~/NewRevert (master|REVERTING)
$ git restore --staged
fatal: you must specify path(s) to restore

Administrator@0257530497995b1 MINGW64 ~/NewRevert (master|REVERTING)
$ git restore --staged file.txt

Administrator@0257530497995b1 MINGW64 ~/NewRevert (master|REVERTING)
$ git status
On branch master
You are currently reverting commit 231a07d.
  (all conflicts fixed: run "git revert --continue")
  (use "git revert --skip" to skip this patch)
  (use "git revert --abort" to cancel the revert operation)

nothing to commit, working tree clean

Administrator@0257530497995b1 MINGW64 ~/NewRevert (master|REVERTING)
$ echo "A4" >> file.txt

Administrator@0257530497995b1 MINGW64 ~/NewRevert (master|REVERTING)
$ git startus
git: 'startus' is not a git command. See 'git --help'.

The most similar command is
        status

Administrator@0257530497995b1 MINGW64 ~/NewRevert (master|REVERTING)
$ git status
On branch master
You are currently reverting commit 231a07d.
  (all conflicts fixed: run "git revert --continue")
  (use "git revert --skip" to skip this patch)
  (use "git revert --abort" to cancel the revert operation)

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   file.txt

no changes added to commit (use "git add" and/or "git commit -a")

Administrator@0257530497995b1 MINGW64 ~/NewRevert (master|REVERTING)
$ git add .
warning: in the working copy of 'file.txt', LF will be replaced by CRLF the next time Git touches it

Administrator@0257530497995b1 MINGW64 ~/NewRevert (master|REVERTING)
$ git commit -m "a4"
[master 1ebfa03] a4
 1 file changed, 1 insertion(+)

Administrator@0257530497995b1 MINGW64 ~/NewRevert (master|REVERTING)
$ git status
On branch master
Revert currently in progress.
  (run "git revert --continue" to continue)
  (use "git revert --skip" to skip this patch)
  (use "git revert --abort" to cancel the revert operation)

nothing to commit, working tree clean

Administrator@0257530497995b1 MINGW64 ~/NewRevert (master|REVERTING)
$ git revert
usage: git revert [--[no-]edit] [-n] [-m <parent-number>] [-s] [-S[<keyid>]] <commit>...
   or: git revert (--continue | --skip | --abort | --quit)

    --quit                end revert or cherry-pick sequence
    --continue            resume revert or cherry-pick sequence
    --abort               cancel revert or cherry-pick sequence
    --skip                skip current commit and continue
    --[no-]cleanup <mode> how to strip spaces and #comments from message
    -n, --no-commit       don't automatically commit
    --commit              opposite of --no-commit
    -e, --[no-]edit       edit the commit message
    -s, --[no-]signoff    add a Signed-off-by trailer
    -m, --[no-]mainline <parent-number>
                          select mainline parent
    --[no-]rerere-autoupdate
                          update the index with reused conflict resolution if possible
    --[no-]strategy <strategy>
                          merge strategy
    -X, --[no-]strategy-option <option>
                          option for merge strategy
    -S, --[no-]gpg-sign[=<key-id>]
                          GPG sign commit
    --[no-]reference      use the 'reference' format to refer to commits


Administrator@0257530497995b1 MINGW64 ~/NewRevert (master|REVERTING)
$ git revert HEAD~2
Auto-merging file.txt
CONFLICT (content): Merge conflict in file.txt
error: could not revert cf4e716... a2
hint: After resolving the conflicts, mark them with
hint: "git add/rm <pathspec>", then run
hint: "git revert --continue".
hint: You can instead skip this commit with "git revert --skip".
hint: To abort and get back to the state before "git revert",
hint: run "git revert --abort".
hint: Disable this message with "git config advice.mergeConflict false"
---------------------x-------------------